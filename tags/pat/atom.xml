<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: pat | Life of Asuwill]]></title>
  <link href="http://jiangdapeng.github.io/tags/pat/atom.xml" rel="self"/>
  <link href="http://jiangdapeng.github.io/"/>
  <updated>2013-10-20T13:50:10+08:00</updated>
  <id>http://jiangdapeng.github.io/</id>
  <author>
    <name><![CDATA[Asuwill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PAT 1001-1010 题解]]></title>
    <link href="http://jiangdapeng.github.io/blog/2013/10/20/pat-1001-1010-solutions/"/>
    <updated>2013-10-20T09:45:00+08:00</updated>
    <id>http://jiangdapeng.github.io/blog/2013/10/20/pat-1001-1010-solutions</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>PAT 是浙江大学搞出来的一个编程（<strong>P</strong>rogramming）能力（<strong>A</strong>bility）测试（<strong>T</strong>est），在姥姥的大力推广下，目前也逐渐走上了正道，详细介绍可以直接到官网查看 <a href="http://pat.zju.edu.cn/" title="PAT官方网站">http://pat.zju.edu.cn/</a></p>

<p>我断断续续也将上面的题目做得差不多了，想来也应该总结一下，算是给自己一个交代。题解大致的形式将会是每10个（或者少于10个）题目一篇博文，对每个题目而言，会简述题目大意，然后是思路整理，然后是代码链接。我已经完成的题目的代码都在github上，<a href="https://github.com/jiangdapeng/pat" title="pat 源代码">请戳我</a></p>

<h2><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1001" title="1001. A+B Format (20)">1001. A+B Format (20)</a></h2>

<h3>题意</h3>

<p>按照给定的格式输出两个整数的和：即每三位数一组用逗号分隔，例如 <code>999991</code> 就应该输出为 <code>999,991</code></p>

<h3>思路</h3>

<p>简单题，可以将和每次三位取出（即按照<code>1000进制</code>），然后再从高位开始输出即可，注意处理负数，中间合适的位置加上<code>,</code>
主要代码如下：</p>

<p>```c++
void format(int  n)
{
  bool neg = false;
  if(n&lt;0)
  {</p>

<pre><code>neg = true;
n = -n;
</code></pre>

<p>  }
  stack<int> vi;
  do
  {</p>

<pre><code>vi.push(n%1000);
n /= 1000;
</code></pre>

<p>  }while(n!=0);
  if(neg)</p>

<pre><code>cout &lt;&lt; "-";
</code></pre>

<p>  cout &lt;&lt; vi.top();
  vi.pop();
  while(!vi.empty())
  {</p>

<pre><code>int top = vi.top();
vi.pop();
printf(",%03d",top);
</code></pre>

<p>  }
  cout &lt;&lt; endl;
}
```
完整代码<a href="https://github.com/jiangdapeng/pat/blob/master/Advanced%20Level/1001.%20A%2BB%20Format%20(20).cpp" title="1001">请戳我</a></p>

<h2><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1002" title="1002. A+B for Polynomials (25)">1002. A+B for Polynomials (25)</a></h2>

<h3>题意</h3>

<p>求两个多项式的和，<code>a</code> 和 <code>b</code> 都以 <code>K N1 aN1 N2 aN2 ... NK aNK</code>的形式表示，其中 <code>K</code> 表示多项式中中非零项的个数，<code>Ni</code> 和 <code>aNi</code> 分别表示指数和系数</p>

<h3>思路</h3>

<p>类似于归并的思想，从高到低将指数相同的项的系数加起来，如果某指数项只在一个数中有，直接保留在结果里即可，需要注意的是如果系数加起来为0，这一项就不能放进结果。
核心代码：
``` c++
  // p1+p1
  vector<Poly> result;
  vector<Poly>::iterator vi1 = p1.begin();
  vector<Poly>::iterator vi2 = p2.begin();
  while((vi1 != p1.end()) &amp;&amp; (vi2!= p2.end()))
  {</p>

<pre><code>if(vi1-&gt;exp == vi2-&gt;exp)
{
  tmp.exp = vi1-&gt;exp;
  tmp.coe = vi1-&gt;coe + vi2-&gt;coe;
  if(tmp.coe !=0)
    result.push_back(tmp);
  ++vi1;
  ++vi2;
}
else if(vi1-&gt;exp &gt; vi2-&gt;exp)
{
  result.push_back(*vi1);
  ++vi1;
}
else
{
  result.push_back(*vi2);
  ++vi2;
}
</code></pre>

<p>  }
  while(vi1 != p1.end())
  {</p>

<pre><code>result.push_back(*vi1);
++vi1;
</code></pre>

<p>  }
  while(vi2 != p2.end())
  {</p>

<pre><code>result.push_back(*vi2);
++vi2;
</code></pre>

<p>  }
```
完整代码<a href="https://github.com/jiangdapeng/pat/blob/master/Advanced%20Level/1002.%20A%2BB%20for%20Polynomials%20(25).cpp" title="1002">请戳我</a></p>

<h2><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1003" title="pat 1003">1003. Emergency (25)</a></h2>

<h3>题意</h3>

<p>给定城市之间的道路距离，以及每个城市的营救队的人数，求从城市 <code>c1</code> 到 <code>c2</code>的最短路径的条数，以及沿途能够召集的最大人数。</p>

<h3>思路</h3>

<p>典型的最短路径题，采用Dijkstra算法，但是这里不仅仅是找出一条最短路径，而是要计算最短路径的条数，并且需要统计沿途能够召集的最大人数。能够召集的人数没什么问题，只需要在最短路径的基础上加上一个人数的比较，<code>callup[c]</code>表示达到<code>城市c</code>的时候能够召集的最大人数。用<code>count_path[c]</code>表示到达<code>城市c</code>的最短路径的条数。</p>

<ol>
<li>如果 <code>dist[c] + edge[c,adj] &lt; dist[adj]</code> 则  <code>dist[adj] = dist[c] + edge[c,adj]; count_path[adj] = count_path[c]； callup[adj] = callup[c] + people[adj]</code></li>
<li>如果 <code>dist[c] + edge[c,adj] == dist[adj]</code> 也就是有多条距离相同的路径到达城市<code>adj</code>，这个时候 <code>count_path[adj] = count_path[adj] + count_path[c]; callup[adj] = max { callup[adj], callup[c] + people[adj] }</code></li>
</ol>


<p>代码结构：
``` c++
  // start from start city
  dist[start] = 0;
  count[start] = 1;// one shortest path from start to start
  callup[start] = people[start];
  while(true)
  {</p>

<pre><code>int city = nearest_city();
visited[city] = true;
if(city == end)
  break;
update_neighbor(city);
</code></pre>

<p>  }
<code>``
</code>nearest_city<code>，可以通过</code>priority_queue`最小堆实现，我当时用了线性遍历查找，因为测试数据小，也能过。</p>

<p>完整代码<a href="https://github.com/jiangdapeng/pat/blob/master/Advanced%20Level/1003.%20Emergency%20(25).cpp" title="1003">请戳我</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown 常用语法]]></title>
    <link href="http://jiangdapeng.github.io/blog/2013/10/08/markdown-syntax/"/>
    <updated>2013-10-08T09:44:00+08:00</updated>
    <id>http://jiangdapeng.github.io/blog/2013/10/08/markdown-syntax</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<h2>为什么我会出现在标签 pat 下</h2>

<p>说起来，是因为，我写第一篇pat题解，用 <code>bundle exec rake generate</code> 的时候，报错了</p>

<blockquote><p>Liquid Exception: comparison of Array with Array failed in page</p></blockquote>

<p>Google 了一下，有人说是“每个tag都只使用一次的时候”，这个问题就会出现。我测试了一下，还果真是如此，为了暂时解决这个问题，我只好把pat标签在这篇post里也应用一下了。</p>

<h2>标题</h2>

<h1>这是 H1</h1>

<p><code>
\# 这是 H1
</code></p>

<h2>这是 H2</h2>

<p><code>
\## 这是 H2
</code></p>

<h3>这是 H3</h3>

<p><code>
\### 这是 H3
</code></p>

<h4>这是 H4</h4>

<p><code>
\#### 这是 H4
</code></p>

<h2>区块引用</h2>

<blockquote><p>区块引用1</p>

<blockquote><p>区块引用2</p></blockquote>

<p>回到引用1</p>

<h2>这是一个标题</h2>

<ol>
<li>列表1</li>
<li>列表2</li>
</ol>


<p>给出一些例子代码：</p>

<p>  return shell_exec(&ldquo;echo $input | $markdown_script&rdquo;);</p></blockquote>

<h2>列表</h2>

<h3>无序列表</h3>

<ul>
<li>师叔</li>
<li>师太</li>
<li>春哥</li>
<li>马老师</li>
<li>主席</li>
<li>女王大人</li>
<li>亲王大人</li>
</ul>


<h3>有序列表</h3>

<ol>
<li>师叔女人1号</li>
<li>师叔女人2号</li>
<li>师叔女人3号</li>
<li>。。。</li>
</ol>


<h2>代码区块</h2>

<p>这是普通的段落</p>

<pre><code>这是代码块（行首4个空格或者1个制表符）
</code></pre>

<h2>区段元素</h2>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: algorithm | Life of Asuwill]]></title>
  <link href="http://jiangdapeng.github.io/tags/algorithm/atom.xml" rel="self"/>
  <link href="http://jiangdapeng.github.io/"/>
  <updated>2014-03-07T11:26:24+08:00</updated>
  <id>http://jiangdapeng.github.io/</id>
  <author>
    <name><![CDATA[Asuwill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[八皇后有多少种解？]]></title>
    <link href="http://jiangdapeng.github.io/blog/2014/03/07/eight-queen-problem/"/>
    <updated>2014-03-07T10:10:00+08:00</updated>
    <id>http://jiangdapeng.github.io/blog/2014/03/07/eight-queen-problem</id>
    <content type="html"><![CDATA[<h3>什么是八皇后问题？</h3>

<blockquote><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8X8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。计算机发明后，有多种方法可以解决此问题。——【百度百科】</p></blockquote>

<p>如下图所示的摆放方式就是一个满足要求的方案：
<img src="http://c.hiphotos.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=493dc882f9198618554ae7d62b844516/4a36acaf2edda3cc86fff5c300e93901203fb80e7becba06.jpg" alt="" /></p>

<h3>八皇后有多少种解？</h3>

<p>前面引自百科的资料里也有提到，高斯认为有76种方案，还有人解出有92种方案。到底有多少种方案呢？高斯这么厉害的角色也会出错吗？我今天就想用一小段代码来求解这个问题。不过顺便说一句，人家高斯当年计算可没有计算机帮忙啊，能给出76种方案已经是非常人所能匹敌的。</p>

<h3>思路</h3>

<p>总思想：暴力破解</p>

<p>步骤一：罗列所有可能的摆放方式；</p>

<p>步骤二：检测某种摆放方式是否满足要求；</p>

<h4>步骤一</h4>

<p>方式一：罗列摆放方式，第一感觉需要一个矩阵来存储一种状态，因为棋盘是个8 * 8的方格，如果用一个8 * 8的矩阵，有皇后的用1表示，没有皇后的用0，然后再判断这个矩阵是否满足任意两个皇后没有处于同一行同一列或者同一个斜线上。这种表示方式直观，但是如果要罗列这个矩阵所有可能的状态，代价就太大了。因为每个格子都有<code>2</code>种可选状态，总共有<code>64</code>个格子，那么一共有 <code>2^64</code>个状态需要判断，明显这条路是走不通了，果断换一条路吧！</p>

<p>方式二：上面那种方式之所以不行，是因为我们没有充分利用限定条件。满足要求的摆放方式保证了每行每列都只有一个皇后，上面很多种罗列方式明显是不满足的。既然每一行都有一个皇后，那么我们用一个数组<code>column_index[8]</code>来存储每一行的皇后所在的列下标。也就是说 <code>column_index[i]</code>表示第<code>i</code>行的皇后所在的列。<code>column_index</code>如何填充呢？，只需看一下上面的图就知道，数组中必然包含<code>0~7</code>八个数字，而且每个数字必然出现一次，也就是说，一个状态就是<code>0~7</code>的一个排列。比如，上面八皇后的摆放用这种方式表示就是:</p>

<pre><code>column_index = [5, 1, 6, 0, 3, 7, 4, 2]
</code></pre>

<p>那么有多少种排列就有多少种状态需要判断，很简单，8个不同数字的排列数有<code>8！=40320</code>种，也就是说我们将需要判断的状态从 <code>2^64</code>降到了四万多。好，四万多个状态对于计算机来说判断就很快了。进入下一步吧。</p>

<h4>步骤二 判断是否合法</h4>

<p>上面的罗列方式已经确保8皇后不在同一行不在同一列，因此只需要判断是否存在两个皇后在同一个对角线，而这个只需要判断 <code>abs(i - j) == abs(column_index[i] - column_index[j])</code></p>

<p>好最后看一下代码吧</p>

<p>``` python
import  itertools</p>

<p>def is_valid_8_quene(col_index):
  for i in range(8):</p>

<pre><code>for j in range(8):
  if i != j and abs(i-j) == abs(col_index[i] - col_index[j])
    return False
</code></pre>

<p>  return True</p>

<p>def count_8_quene_solutions():
  return sum([1 for p in itertools.permutations(range(8)) if is_valid_8_quene(p)])</p>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:
  print (count_8_quene_solutions())</p>

<p>```</p>

<p>最后结果是多少呢？
我不会告诉你是92的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基础数据结构与算法——排序]]></title>
    <link href="http://jiangdapeng.github.io/blog/2013/10/27/basic-data-structures-and-algorithms-1/"/>
    <updated>2013-10-27T22:39:00+08:00</updated>
    <id>http://jiangdapeng.github.io/blog/2013/10/27/basic-data-structures-and-algorithms-1</id>
    <content type="html"><![CDATA[<p>最近几天在重温基础的数据结构和算法，比如基础的排序算法，以及动态规划的应用，也慢慢的在博客上写一个基础的系列吧，作为自己温习的记录。</p>

<h2>排序算法</h2>

<h3>插入排序</h3>

<p>虽然插入排序的时间复杂度期望是O（n<sup>2</sup>)，但是具有实现简单，属于<strong><em>原地排序</em></strong>，并且是<strong><em>稳定排序</em></strong>的特点。之所以将其叫做插入排序，是因为，每一轮操作都是将一个<strong><em>待排序</em></strong>的数插入到一个<strong><em>已经排好序</em></strong>的序列中，过程可以想象将一张扑克牌插入到已经按顺序摆好的扑克牌中，代码如下：
``` c++
void insertion_sort(int A[], int low , int high)
{</p>

<pre><code>for(int i=low+1; i&lt;=high;++i)
{
    int x = A[i];  // 当前需要排序的数，它之前的数都已经排好序了
    int j = i-1;
    while(j &gt;=low &amp;&amp; A[j] &gt; x)
    {
        A[j+1] = A[j];
        j--;
    }
    A[j+1] = x;  // 将 x 放置在正确的位置
}
</code></pre>

<p>}
```</p>

<!--more-->


<h3>堆排序</h3>

<p>这里的堆排序，特指利用二叉堆进行排序操作，在讲排序前，得先把堆的构建、取最大（最小值）等操作进行介绍。二叉堆实际上是在数组上实现的一个树形结构，而窍门就在于，通过将根元素放置在下标为<strong><em><code>1</code></em></strong>的位置，元素的父节点和左右孩子节点的位置都可以通过简单的运算得到。</p>

<p>``` c++
// 节点 i 的父节点下标 i/2
inline int PARENT(int i)
{</p>

<pre><code>return i &gt;&gt; 1;
</code></pre>

<p>}</p>

<p>// 左孩子 2*i
inline int LEFT(int i)
{</p>

<pre><code>return i &lt;&lt; 1;
</code></pre>

<p>}</p>

<p>// 右孩子 2*i + 1
inline int RIGHT(int i)
{</p>

<pre><code>return (i &lt;&lt; 1) + 1;
</code></pre>

<p>}</p>

<p>inline void SWAP(int&amp; a, int&amp; b)
{</p>

<pre><code>int t = a;
a = b;
b = t;
</code></pre>

<p>}</p>

<p>// 这个纯粹了方便查看一个堆的情况
void print_heap(int A[],int n)
{</p>

<pre><code>cout &lt;&lt; A[1];
for(int i=2;i&lt;=n;i++)
    cout &lt;&lt; " " &lt;&lt; A[i];
cout &lt;&lt; endl;
</code></pre>

<p>}</p>

<p>// 大顶堆，使得以A[i]为根的子树 是个合法的大顶堆
void max_heapify(int A[],int i,int n)
{</p>

<pre><code>int left = LEFT(i);
int right = RIGHT(i);
int next = i;
// 选出左右孩子中最大的元素
if(left &lt;=n &amp;&amp; A[left] &gt; A[next]) next = left;
if(right &lt;=n &amp;&amp; A[right] &gt; A[next]) next = right;
if(next != i)
{
    SWAP(A[next],A[i]);
    max_heapify(A,next,n); // 递归的往下操作
}
</code></pre>

<p>}</p>

<p>void build_heap(int A[], int n)
{</p>

<pre><code>// A[i+1],A[i+2],...,A[n]都是叶子节点，只需要从非叶子节点开始
// 这个操作严格的时间复杂度是O(n)
for(int i=n/2;i&gt;0;--i)
{
    max_heapify(A,i,n);
}
</code></pre>

<p>}</p>

<p>void heap_sort(int A[], int n)
{</p>

<pre><code>// 注意 A 中的有效元素应该从下标为1开始
// 整个的复杂度是O(N*logN)
build_heap(A,n); // 建立最大堆, O(n)
for(int i=n;i&gt;1;--i)
{
    SWAP(A[1],A[i]);
    max_heapify(A,1,i-1); // O(logN)
}
</code></pre>

<p>}</p>

<p>```</p>

<h3>快速排序</h3>

<p>快速排序的核心思想是分治，如何分就成了关键问题。快速排序的想法是:</p>

<blockquote><p>先找到序列中的某个数<code>x</code>，然后将所有小于或等于<code>x</code>的数都放到<code>x</code>前面，大于<code>x</code>的数都放在它后面，然后再分别对前后两个部分进行排序。这个过程被称为<code>选主元</code>。选的过程也将数据进行了一次划分。</p></blockquote>

<p>主元的选择的好坏对算法的性能有影响，原因就在于，如果主元的值合适的话，前后两个子问题的规模可以迅速地降低。例如，如果每次主元都恰好是中间值，那么子问题的规模就以指数形式降低，<code>n/2,  n/4, ..., n/2^k</code>。一种常见的选择主元的方式如下：</p>

<p>``` c++
// 选择最后一个数做主元
int partition(int A[], int low, int high)
{</p>

<pre><code>int x = A[high];
int i = low -1;
for(int j = low;j&lt;high;++j)
{
    // 找到所有小于或等于 x的数，交换到前面
    if(A[j] &lt;= x)
    {
        i++;
        SWAP(A[i],A[j]);
    }
}
SWAP(A[i+1],A[high]); // after this , A[i+1] = x
return i+1;
</code></pre>

<p>}</p>

<p>void quick_sort(int A[], int low ,int high)
{</p>

<pre><code>if(low &lt; high)
{
    int p = partition(A,low,high);
    quick_sort(A,low,p-1);      // 对前半部分排序
    quick_sort(A,p+1,high);     // 对后半部分排序
}
</code></pre>

<p>}</p>

<p>```</p>

<p>如果数据的顺序是随机的，那么这种方式的平均性能并没有什么问题。但是对某些特定顺序的数据，这种方式的快速排序，性能会处于最坏情况，也就是说，时间复杂度是<code>O（n^2)</code>。比如说，数组已经排好序了，那么每次划分后的子问题规模是线性减小的（由<code>n -&gt; n-1 -&gt; n-2  -&gt; ... -&gt; 1</code>），最终整体的复杂度也就是<code>O(n^2)</code>。为了避免这种问题，有一个稍微改进的选主元的方式：</p>

<blockquote><p>每次先选择序列中的三个数，然后选择这三个数的中间那个数作为主元。或者是采用随机函数，随机选择某个数作为主元</p></blockquote>

<p>这种方式几乎可以避免非常坏的情况出现，除非是针对算法特意构造出来的序列。下面给出三选一的一种实现：
``` c++
// 选择三个数的中间数作为主元
int median_partition(int A[], int low, int high)
{</p>

<pre><code>int a = A[low];
int b = A[high];
int c = A[(low+high)/2];
int x = (a &lt;=b &amp;&amp; b&lt;= c || a &gt;= b &amp;&amp; b &gt;= c)?b:(b&lt;= a &amp;&amp; a &lt;= c || c &lt;= a &amp;&amp; a &lt;= b)?a:c;
// 后面的代码都跟前一种实现相同
int i = low -1;
for(int j = low;j&lt;high;++j)
{
    if(A[j] &lt;= x)
    {
        i++;
        SWAP(A[i],A[j]);
    }
}
SWAP(A[i+1],A[high]); // after this , A[i+1] = x
return i+1;
</code></pre>

<p>}
```</p>

<h3>归并排序&amp;others</h3>

<p>归并排序核心思想也是<code>分治</code>，它与快排不同的地方在与，你可以选择以最优的方式来划分子问题（在二归并中，你可以每次都从<code>n/2</code>处划分），因此归并排序在最坏情况下时间复杂度也是<code>O(n*logn)</code>。但是它也有较明显的不足之处：归并排序不是<code>原地排序</code>，主要是在合并的过程中需要利用<code>O(n)</code>的额外空间。以下是归并排序的伪代码：
``` c++
void merge_sort(A, low, high)
{</p>

<pre><code>if(low &lt; high)
{
    middle = (low + high)/2;
    merge_sort(A,low,middle);
    merge_sort(A,middle+1,high);
    merge(A,low,middle,high);
}
</code></pre>

<p>}
```</p>

<p>递归的代码写起来确实非常简洁，但是注意到中间调用了一个<code>merge</code>函数，这个函数并不是递归的，<code>merge</code>的思路也很简单，因为需要合并的两个序列都是已经排好序的，那么每次取两个序列头部的小者填入正确的位置即可。伪代码如下：
``` c++
void merge(A,low,middle,high)
{</p>

<pre><code>n1 = middle - low + 1; // 前一部分元素的个数
n2 = high - middle;    // 后一部分元素的个数
创建数组 left[n1+1] 以及 right[n2+1];
for i = 0 to n1 - 1
    left[i] = A[low+i];
for i = 0 to n2 - 1
    right[i] = A[middle + 1 + i];
left[n1] = INT_MAX;     // 作为哨兵
right[n2] = INT_MAX;    
i = 0;
j = 0;
for k = low to high
    if(left[i] &lt;= right[j])
        A[k] = left[i];
        i++;
    else 
        A[k] = right[j];
        j++;
</code></pre>

<p>}
```</p>

<p>归并的思想还是非常不错的。特别是在需要排序的数非常之多，以至于都无法一次载入内存的时候，就可以利用归并的思想，先将数据分块，将每一块都排序后再逐个合并在一起。</p>

<p>另外还有其他的排序算法，如冒泡排序，好像大学学到的第一个排序算法就是这个？希尔排序，对插入排序的改进，以及<code>不是基于比较的排序算法</code>，如<code>count sort</code>、<code>radix sort</code>、<code>bucket sort</code>等等，后面几种下一次再说。</p>
]]></content>
  </entry>
  
</feed>
